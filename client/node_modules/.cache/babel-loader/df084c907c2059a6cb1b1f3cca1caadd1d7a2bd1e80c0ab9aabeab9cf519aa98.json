{"ast":null,"code":"const jwt = require('jsonwebtoken');\nconst secret = 'mysecretssshhhhhhh';\nconst expiration = '2h';\nmodule.exports = {\n  authMiddleware: function (_ref) {\n    let {\n      req\n    } = _ref;\n    // allows token to be sent via req.body, req.query, or headers\n    let token = req.body.token || req.query.token || req.headers.authorization;\n\n    // We split the token string into an array and return actual token\n    if (req.headers.authorization) {\n      token = token.split(' ').pop().trim();\n    }\n    if (!token) {\n      return req;\n    }\n\n    // if token can be verified, add the decoded user's data to the request so it can be accessed in the resolver\n    try {\n      const {\n        data\n      } = jwt.verify(token, secret, {\n        maxAge: expiration\n      });\n      req.user = data;\n    } catch {\n      console.log('Invalid token');\n    }\n\n    // return the request object so it can be passed to the resolver as `context`\n    return req;\n  },\n  signToken: function (_ref2) {\n    let {\n      email,\n      name,\n      _id\n    } = _ref2;\n    const payload = {\n      email,\n      name,\n      _id\n    };\n    return jwt.sign({\n      data: payload\n    }, secret, {\n      expiresIn: expiration\n    });\n  }\n};","map":{"version":3,"names":["jwt","require","secret","expiration","module","exports","authMiddleware","_ref","req","token","body","query","headers","authorization","split","pop","trim","data","verify","maxAge","user","console","log","signToken","_ref2","email","name","_id","payload","sign","expiresIn"],"sources":["/Users/kristinaalabastro/bootcamp/projects bootcamp/MatchMyNeeds/client/src/utils/auth.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\n\nconst secret = 'mysecretssshhhhhhh';\nconst expiration = '2h';\n\nmodule.exports = {\n  authMiddleware: function ({ req }) {\n    // allows token to be sent via req.body, req.query, or headers\n    let token = req.body.token || req.query.token || req.headers.authorization;\n\n    // We split the token string into an array and return actual token\n    if (req.headers.authorization) {\n      token = token.split(' ').pop().trim();\n    }\n\n    if (!token) {\n      return req;\n    }\n\n    // if token can be verified, add the decoded user's data to the request so it can be accessed in the resolver\n    try {\n      const { data } = jwt.verify(token, secret, { maxAge: expiration });\n      req.user = data;\n    } catch {\n      console.log('Invalid token');\n    }\n\n    // return the request object so it can be passed to the resolver as `context`\n    return req;\n  },\n  signToken: function ({ email, name, _id }) {\n    const payload = { email, name, _id };\n    return jwt.sign({ data: payload }, secret, { expiresIn: expiration });\n  },\n};\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAc,CAAC;AAEnC,MAAMC,MAAM,GAAG,oBAAoB;AACnC,MAAMC,UAAU,GAAG,IAAI;AAEvBC,MAAM,CAACC,OAAO,GAAG;EACfC,cAAc,EAAE,SAAAA,CAAAC,IAAA,EAAmB;IAAA,IAAT;MAAEC;IAAI,CAAC,GAAAD,IAAA;IAC/B;IACA,IAAIE,KAAK,GAAGD,GAAG,CAACE,IAAI,CAACD,KAAK,IAAID,GAAG,CAACG,KAAK,CAACF,KAAK,IAAID,GAAG,CAACI,OAAO,CAACC,aAAa;;IAE1E;IACA,IAAIL,GAAG,CAACI,OAAO,CAACC,aAAa,EAAE;MAC7BJ,KAAK,GAAGA,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE,CAACC,IAAI,EAAE;IACvC;IAEA,IAAI,CAACP,KAAK,EAAE;MACV,OAAOD,GAAG;IACZ;;IAEA;IACA,IAAI;MACF,MAAM;QAAES;MAAK,CAAC,GAAGjB,GAAG,CAACkB,MAAM,CAACT,KAAK,EAAEP,MAAM,EAAE;QAAEiB,MAAM,EAAEhB;MAAW,CAAC,CAAC;MAClEK,GAAG,CAACY,IAAI,GAAGH,IAAI;IACjB,CAAC,CAAC,MAAM;MACNI,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC9B;;IAEA;IACA,OAAOd,GAAG;EACZ,CAAC;EACDe,SAAS,EAAE,SAAAA,CAAAC,KAAA,EAAgC;IAAA,IAAtB;MAAEC,KAAK;MAAEC,IAAI;MAAEC;IAAI,CAAC,GAAAH,KAAA;IACvC,MAAMI,OAAO,GAAG;MAAEH,KAAK;MAAEC,IAAI;MAAEC;IAAI,CAAC;IACpC,OAAO3B,GAAG,CAAC6B,IAAI,CAAC;MAAEZ,IAAI,EAAEW;IAAQ,CAAC,EAAE1B,MAAM,EAAE;MAAE4B,SAAS,EAAE3B;IAAW,CAAC,CAAC;EACvE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}